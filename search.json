[{"title":"ToGo系统制作","url":"/article/5294ae7d/","content":"\n---\n\n## 一、 制作ventoyU盘\n\n1.   打开`Ventoy2Disk.exe`，选择目标U盘或者移动硬盘，安装\n    ![安装ventoy](../images/togo/安装ventoy.png)\n\n2.   格式化ventoyU盘为NTFS格式\n    需要注意的是不要格式化只有几十M的那个分区，否则需要重新制作ventoyU盘\n\n## 二、制作WinToGo系统\n\n[下载windows官方镜像](https://www.microsoft.com/zh-cn/software-download)\n\n下载`WinNTSetup`这款软件\n\n### 1. 创建vhdx虚拟磁盘\n\n打开`磁盘管理`，选择`更多操作`->`创建VHD`\n\n![创建vhdx_1](../images/togo/创建vhdx_1.png)\n\n选择vhdx文件存放位置，设置虚拟磁盘的大小，格式选择`VHDX`和`动态扩展`\n\n![创建vhdx_2](../images/togo/创建vhdx_2.png)\n\n初始化磁盘\n\n![初始化vhdx_1](../images/togo/初始化vhdx_1.png)\n\n新建简单卷，选择`GPT`形式，格式选择`NTFS`\n\n![初始化vhdx_2](../images/togo/初始化vhdx_2.png)\n\n### 2. 安装win11系统\n\n将下载好的镜像安装到刚刚准备的虚拟磁盘中\n\n打开`WinNTSetup`，选择镜像，驱动安装位置选择刚刚创建的虚拟磁盘，选择系统版本\n\n![安装win11系统_1](../images/togo/安装win11系统_1.png)\n\n引导代码选择`不更新引导代码`，BDC选择`UEFI`\n\n**切记**：一定要选择`不更新引导代码`！一定要选择`不更新引导代码`！一定要选择`不更新引导代码`！\n\n如果忘记选，会导致本来的系统无法正常启动，至于解决办法没有尝试过\n\n![安装win11系统_2](../images/togo/安装win11系统_2.png)\n\n等待安装完成，然后选择重启电脑\n\n![重启电脑](../images/togo/重启电脑.png)\n\n选择带有VHDX的系统，接下来就是正常安装配置windows，按照提示进行即可，安装过程中可能会多次重启，都是正常现象\n\n<img src=\"../images/togo/选择系统启动_1.png\" width=\"75%\" height=\"75%\" />\n\n完成安装完成进入到桌面后重启电脑，选择原来的系统启动\n\n### 3. 删除多余的启动引导\n\n打开`WinNTSetup`，点击右上角的win图标，选择`Bootice`\n\n![删除启动引导_1](../images/togo/删除启动引导_1.png)\n\n选择`BCD编辑`，`智能编辑模式`\n\n![删除启动引导_2](../images/togo/删除启动引导_2.png)\n\n将带有VHDX的系统删除即可，不删除的话每次电脑开机都会进行选择\n\n![删除启动引导_3](../images/togo/删除启动引导_3.png)\n\n最后，将创建好的`.vhdx`系统移动到VentoyU盘内即可\n\n\n\n\n\n## 三、制作UbuntuToGo系统\n\nUbuntuToGo系统会稍微麻烦一点\n\n1.   安装virtualbox\n    略，正常安装，没什么可说的\n\n2.   新建一个虚拟机\n    ![新建虚拟机](../images/togo/新建虚拟机.png)\n\n未完待续...\n\n\n\n## 其它说明\n\n文章参考：[【教程】ventoy制作优麒麟TOGO/UbuntuTOGO](https://www.bilibili.com/read/cv18170436)\n\n如果U盘内需要存储其它非镜像文件或非虚拟磁盘文件，请在文件加内创建名为`.ventoyignore`的空文件，子文件夹内不需要创建。如果不创建`.ventoyignore`，ventoy启动会读取文件夹内的所有文件，导致ventoy启动变慢。\n","tags":["Ventoy","WinToGo","UbuntuToGo"],"categories":["ToGo"]},{"title":"vhdx虚拟磁盘扩容","url":"/article/a612d63b/","content":"\n---\n\nwindows使用管理员身份打开`Power Shell`\n\n```bash\nResize-VHD -Path 'Win11ToGo.vhdx' -SizeBytes 120GB\n```\n\n执行上面的指令，替换`.vhdx`文件路径，修改扩容后磁盘的大小\n\n然后打开磁盘管理工具，就会看到多出了一部分未分配的空间，将其扩容给`.vhdx`即可\n","tags":["vhdx"],"categories":["vhdx"]},{"title":"Python入门2","url":"/article/py002/","content":"\n---\n\n## Hello World\n\nPython程序的文件是以`.py`结尾的\n\n```python\nprint('Hello World!')\n```\n\n...\n\n---\n\n## 注释\n\n程序是由代码和注释构成，注释是对某一代码做的解释\n注释不参与程序执行，仅仅起解释作用\n注释有两种形式：单行注释、多行注释\n\n**单行注释**\n\n单行注释以`#`开头\n\n```python\n# 这是一个单行注释\nprint('Hello World!')\n```\n\n**多行注释**\n\n多行注释的内容写在三对`''' '''`或者`\"\"\" \"\"\"`中间\n\n```python\n'''\n多行\n注释\n'''\nprint('Hello World!')\n\"\"\"\n多行\n注释\n\"\"\"\n```\n\n---\n\n## 缩进\n\n在Python中，代码有着严格的缩进\n\n需要注意的是，平时缩进一般都会使用<kbd>Tab</kbd>对代码进行快捷缩进，这样的缩进方式一般都是制表键\n\n但并不推荐使用制表键，而是仅使用空格进行缩进\n\n一般代码编辑器里面都会有使用空格替换制表键的功能\n\n在VScode中可以修改<kbd>Tab</kbd>默认使用空格\n\n```python\nfor i in range(11):\n    print(i)\nprint('打印完成')\n```\n\n---\n\n## 变量\n\n**什么是变量？**\n\n变量来源于数学，是计算机语言中能储存计算结果或能表示值的抽象概念\n变量指代存储的数据\n例如（名字）\n\n```python\na = 1\nb = 'b'\nc = '变量'\n```\n\n[Python中的命名规范](/article/)\n\n---\n\n## 系统关键字\n\n```python\nfrom keyword import kwlist\nprint(kwlist)\n```\n\n```bash\n['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n```\n\n**注意：**系统关键字不可用用于变量命名！\n","tags":["Hello World","入门"],"categories":["Python"]},{"title":"Python学习规划","url":"/article/e1830c11/","content":"\n---\n\n想要学好一门变成语言，有一个合理的规划是必要的\n但是对于初学者来说并不一定都知道应该先学哪些再学哪些，只能跟着别人走\n这里仅列出一些框架参考\n\n---\n\n## 预备知识\n\n1.   [Python简介](/article/py001/#Python简介)\n2.   [安装Python](/article/py001/#安装Python)\n3.   [常用开发工具](/article/py001/#常用开发工具)\n4.   [Hello World!](/article/py002/#Hello-World)\n5.   [注释](/article/py002/#注释)、[缩进](/article/py002/#缩进)、[变量](/article/py002/#变量)、[系统关键字](/article/py002/#系统关键字)\n\n---\n\n## 基础语法\n\n1.   顺序语句结构\n2.   条件分支结构 和 循环结构\n3.   数据类型\n4.   函数 和 类\n5.   内置函数 和 内置类\n\n---\n\n## 一些有必要知道的知识\n\n1.   Python中的命名规范\n2.   包管理工具pip 和 虚拟环境\n3.   poetry\n\n---\n\n## 进阶语法\n\n1.   列表推导式 和 三元表达式\n2.   断言 和 with...as...\n3.   异常捕获预处理\n4.   lambda函数\n\n---\n\n## 面向对象编程\n\n\n\n---\n\n## 基本技能\n\n\n\n---\n\n## Web应用开发\n\n\n\n---\n\n## 网络爬虫\n\n\n\n---\n\n## 桌面应用开发\n\n\n\n","tags":["学习规划"],"categories":["Python"]},{"title":"Python中的命名规范","url":"/article/84be5050/","content":"\n## 命名规范\n\n| 类型                    | 命名规范               |\n| ----------------------- | ---------------------- |\n| 项目（project）         | MyProject              |\n| 类（class）             | MyNamingConvention     |\n| 异常（Exception）       | MyNamingConvention     |\n| 模块（module）          | my_naming_convention   |\n| 包（package）           | my_naming_convention   |\n| 函数（function）        | my_naming_convention() |\n| 全局/类变量（variable） | my_naming_convention   |\n| 全局/类常量（constant） | MY_NAMING_CONVENTION   |\n\n\n不可以使用系统关键字进行命名\n","tags":["Python","命名规范"],"categories":["Python"]},{"title":"Python基础语法","url":"/article/b8a3dfda/","content":"\n## 注释\n\n程序是由代码和注释构成，注释是对某一代码做的解释\n注释不参与程序执行，仅仅起解释作用\n注释有两种形式：单行注释、多行注释\n\n**单行注释**\n\n单行注释以`#`开头\n\n```python\n# 这是一个单行注释\nprint('Hello World!')\n```\n\n**多行注释**\n\n多行注释的内容写在三对`''' '''`或者`\"\"\" \"\"\"`中间\n\n```python\n'''\n多行\n注释\n'''\n\n\"\"\"\n多行\n注释\n\"\"\"\n```\n\n## 变量\n\n**什么是变量？**\n\n变量来源于数学，是计算机语言中能储存计算结果或能表示值的抽象概念\n变量指代存储的数据\n例如（名字）\n\n```python\na = 1\nb = 'b'\nc = '变量'\n```\n\n[Python中的命名规范](/article/)\n\n## 系统关键字\n\n```python\nfrom keyword import kwlist\nprint(kwlist)\n```\n\n```bash\n['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n```\n\n**注意：**系统关键字不可用用于变量命名！\n\n## 缩进\n\n在Python中，代码有着严格的缩进\n\n需要注意的是，平时缩进一般都会使用<kbd>Tab</kbd>对代码进行快捷缩进，这样的缩进方式一般都是使用的制表键，但在Python中不推荐使用制表键，而是使用空格进行缩进，一般代码编辑器里面都会有使用空格替换制表键的功能\n\n```python\nfor i in range(11):\n    print(i)\nprint('打印完成')\n```\n\n","tags":["Python","基础"],"categories":["Python"]},{"title":"poetry","url":"/article/ca5259af/","content":"\n\n\npoetry是一个依赖管理和打包工具\n\n```bash\npython -m venv env --prompt <name>\n```\n\n","tags":["poetry"],"categories":["poetry"]},{"title":"服务器部署git仓库","url":"/article/7fcdcfa5/","content":"\n## 开始\n\n安装`Git`\n\n```bash\n# 创建服务器仓库\ngit init --bare name\n# 修改默认分支名\ngit symbolic-ref HEAD refs/heads/main\n```\n\n\n\n```bash\ngit remote add origin git@example.com:my_project.git\n# root@111.111.111.111:/xxx/xxx/xxx.git\n# https://github.com/xxx/xxx.git\ngit push -u origin main\n```\n\n","tags":["git"],"categories":["git"]},{"title":"Python入门1","url":"/article/py001/","content":"\n---\n\n## Python简介\n\nPython 是一种简单易学并且结合了**解释性、编译性、互动性和面向对象的脚本语言**。\n\nPython提供了高级数据结构，它的语法和动态类型以及解释性使它成为广大开发者的首选编程语言。\n\n-   **Python 是解释型语言：** 开发过程中没有了编译这个环节。类似于PHP和Perl语言。\n-   **Python 是交互式语言：** 可以在一个 Python 提示符 >>> 后直接执行代码。\n-   **Python 是面向对象语言:** Python支持面向对象的风格或代码封装在对象的编程技术。\n\n**Python的特点**\n\n-   **简单易读易学**：Python是非常简单的语言，并且具有清晰的风格和强制缩进，Python具有简单的语法，极其容易入门。\n-   **免费其开源**：Python是自由/开放源码的软件。可以自行对其源代码进行修改使用。\n-   **可移植性**：Python可以被移植在许多平台上，常用的平台包括Linux、Windows、VxWorks、PlayStation、Windows CE、PocketPC等。\n-   **解释性**： Python解释器把源代码转换成字节码，然后再把它翻译成计算机使用的机器语言并运行，即Python代码在运行之前不需要编译。\n-   **面向对象**：Python支持面向对象的编程。程序通过组合（composition）与继承（inheritance）的方式定义类（class）。\n-   **可扩展性**：如果需要一段关键代码运行得更快或者希望某些算法不公开，那么可以将部分程序用C或C++进行编写，然后在Python程序中调用。\n-   **可嵌入性**：可以把Python嵌入C/C++程序，从而向程序用户提供脚本功能。\n-   **交互式命令行**：python可以单步直译运行，可以在一个 Python 提示符 >>> 后直接执行代码。\n-   **丰富的标准库**：Python标准库包括字符串处理（字典、数组切片、正则表达式re）、文档生成、多线程、串行化、数据库、HTML/XML解析（BeautifulSoup，Expat）、单元测试（PyUnit）、代码版本控制（PySVN）、WAV文件、网络控制（urllib2）、密码系统、GUI（图形用户界面，PyQt）、图形模块（Tkinter、PyTCL、WxPython）等。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。\n-   **规范性**：采用强制缩进的方式使得代码具有较好可读性，减少了视觉上的错乱。\n-   **胶水语言**：python经常用作将不同语言编写的程序“粘”在一起的胶水语言。Boost.Python使得Python和C++的类库可互相调用（.pyc）；Jpython是用Java实现的Python，可以同时使用两者的类库；Ironpython是Python在.NET平台上的版本。\n\n---\n\n## 安装Python\n\n1. 从官网下载Python的安装包\n\n    | Python版本     | 下载链接                                                     |\n    | -------------- | ------------------------------------------------------------ |\n    | Python官网     | [https://www.python.org/](https://www.python.org/)           |\n    | Python-3.10.10 | [https://www.python.org/ftp/python/3.10.10/python-3.10.10-amd64.exe](https://www.python.org/ftp/python/3.10.10/python-3.10.10-amd64.exe) |\n    | Python-3.11.3  | [https://www.python.org/ftp/python/3.11.3/python-3.11.3-amd64.exe](https://www.python.org/ftp/python/3.11.3/python-3.11.3-amd64.exe) |\n\n2. 双击安装包进行安装\n\n    勾选`Add python.exe to PATH`，这一步非常有必要\n\n    选择自定义安装\n\n    ![添加环境变量&自定义安装](../images/python/python安装/添加环境变量&自定义安装.png)\n\n3. 勾选`pip`，pip是Python的包管理工具，其它的可以保持不变\n\n    ![勾选pip](../images/python/python安装/勾选pip.png)\n\n4. 选择安装路径\n\n    勾选`Add Python to enviroment variables`选项\n\n    是否为所有用户安装可自行选择\n\n    ![选择安装路径](../images/python/python安装/选择安装路径.png)\n\n5. 安装完成\n\n    ![完成安装](../images/python/python安装/完成安装.png)\n\n6. 检查环境变量\n   \n    按住<kbd>win</kbd>+<kbd>R</kbd>，输入`cmd`后回车\n\n    ![打开cmd](../images/python/python安装/打开cmd.png)\n\n    在cmd窗口中输入`python --version`，如果显示Python的版本号，则环境变量配置成功\n\n    ![检测环境变量是否添加成功](../images/python/python安装/检测环境变量是否添加成功.png)\n\n---\n\n## 常用开发工具\n\nVscode\n\n\n\nPycharm\n\n\n\nJupyter\n\n\n\n---\n\n## 配置镜像源\n\n以清华的镜像源为例\n\n打开`cmd`，输入以下代码即可配置\n\n```bash\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n**其它常用镜像源**\n\n- 清华：https://pypi.tuna.tsinghua.edu.cn/simple\n- 阿里云：http://mirrors.aliyun.com/pypi/simple\n- 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple\n- 豆瓣：http://pypi.douban.com/simple\n\n---\n\n## pip的使用方法\n\n### 升级pip版本\n\n为了减少不必要的麻烦，请用下面的命令来升级pip\n\n```bash\npython -m pip install --upgrade pip\n```\n\n### 使用pip安装Python第三方包\n\n```bash\npip install 包名1 包名2 包名3 ...\npip install requests aiohttp fastapi \"uvicorn[standard]\"\n```\n\n---\n\n## 文章参考\n\n-   [【python技能树】python简介](https://blog.csdn.net/ywsydwsbn/article/details/124509707)\n","tags":["简介","安装","开发工具"],"categories":["Python"]},{"title":"宝塔面板配置环境变量","url":"/article/30b26554/","content":"\n## 在宝塔面板中配置Node.js的环境变量  \n\n在宝塔面板中实用Node.js版本管理器安装Node.js后，将某一个版本添加到环境变量中使用  \n\n\n1.   先打开Node.js版本管理器，打开对应版本的环境变量，复制下面这一部分，不要最后的`/`  \n![环境变量-1](../images/bt/环境变量-1.png)  \n\n2.   打开`/etc/profile`，添加下面两行代码  \n```bash\n# 将下面的路径换成上一步复制的路径\nexport NODE_HOME=/www/server/nodejs/v18.16.0\nexport PATH=$NODE_HOME/bin:$PATH\n```","tags":["宝塔面板","环境变量","Node.js"],"categories":["宝塔面板"]},{"title":"洛神赋","url":"/article/ba663a52/","content":"\n## 洛神赋\n\n黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰：\n\n余从京域，言归东藩。背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则未察，仰以殊观，睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯？若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王之所见也，无乃是乎？其状若何？臣愿闻之。”\n\n余告之曰：“其形也，<font color=\"red\">翩若惊鸿，婉若游龙</font>。荣曜秋菊，华茂春松。<font color=\"red\">髣髴兮若轻云之蔽月，飘飖兮若流风之回雪</font>。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜，明眸善睐，靥辅承权。瑰姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。\n\n于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。攘皓腕于神浒兮，采湍濑之玄芝。余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修兮，羌习礼而明诗。抗琼珶以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。\n\n于是洛灵感焉，徙倚彷徨，神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。\n\n尔乃众灵杂沓，命俦啸侣，或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神，凌波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。\n\n于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔，鲸鲵踊而夹毂，水禽翔而为卫。\n\n于是越北沚。过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮，哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阴，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。\n\n于是背下陵高，足往神留，遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵而增慕。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。\n","tags":["洛神赋"],"categories":["诗词"]},{"title":"test","url":"/article/d87f7e0c/","content":"\n## test-img\n\n![001](../images/bg/001.png)\n\n<img src=\"../img/bg/001.png\" alt=\"001\" width=\"75%\" height=\"75%\" />\n\n---\n11111\n![bg/001](https://blog-1310452861.cos.ap-chengdu.myqcloud.com/bg/001.jpg)\n22222\n<img src=\"https://blog-1310452861.cos.ap-chengdu.myqcloud.com/bg/001.jpg\" alt=\"bg/001\" width=\"75%\" height=\"75%\" />\n33333\n{% image https://blog-1310452861.cos.ap-chengdu.myqcloud.com/bg/001.jpg, width=100px, height=75px, alt=001 %}\n\n\n\n\n---\n\n## test-url\n\n[个人博客搭建](/article/9639fcc6/)\n[github测试](https://chenai140.github.io/article/d87f7e0c/)\n\n\n\n---\n\n## test-txt\n\n```python\nimport re\n\ndef func():\n    a = 1\n    b = 2\n    return a + b\n\nfunc()\n```\n\n::: tips\n**提示**\n这是一个提示\n:::\n\n::: warning\n**注意**\n这是一个警告\n:::\n\n::: danger\n**警告**\n这是一个危险信号\n:::\n\n::: success\n**成功**\n这是一个成功信号\n:::\n\n\n\n&emsp;&emsp;首行缩进\n\n```bash\ncnpm i hexo-renderer-markdown-it --save\n\ncnpm i markdown-it-checkbox\ncnpm i markdown-it-imsize\ncnpm i markdown-it-expandable\n```\n","tags":["test"],"categories":["test"]},{"title":"个人博客搭建","url":"/article/9639fcc6/","content":"欢迎访问[Hexo](https://hexo.io/)! 这是你的第一篇帖子。检查[documentation](https://hexo.io/docs/)了解更多信息。如果您在使用Hexo时遇到任何问题，可以在[故障排除](https://hexo.io/docs/troubleshooting.html)中找到答案或者你可以在[GitHub](https://github.com/hexojs/hexo/issues)上问我.\n\n[主题-Butterfly](https://github.com/jerryc127/hexo-theme-butterfly/blob/dev/README_CN.md)\n\n# 个人博客搭建教程\n\n## 准备工作  \n\n下载`Node·js`、`Git`  \n\n## 初始化博客\n\n如果npm慢或者没有反应可以安装cnpm，使用cnpm替换命令中的npm进行安装\n\n```bash\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo s\n```\n\n## 安装主题\n\n略  \n\n## 配置  \n\n略  \n\n## 添加搜索  \n\n```bash\n# 略\n```\n\n## 创建文章  \n\n```bash\nhexo new \"文章标题\"\n```\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n## 快速开始  \n\n### 生成静态文件  \n\n```bash\n# hexo generate\nhexo g\n```\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 开启本地服务  \n\n```bash\n# hexo server\nhexo s\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 部署到远程站点  \n\n```bash\n# hexo deploy\nhexo d\n```\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### 清理缓存  \n\n```bash\nhexo clean\n```\n\n## 创建分类  \n\n[链接](https://blog.csdn.net/cflsup/article/details/123452683)  \n\n```bash\nhexo new page categories\n```\n\n## 创建标签  \n\n```bash\nhexo new page tags\n```\n\n","tags":["博客","教程"],"categories":["博客搭建"]}]